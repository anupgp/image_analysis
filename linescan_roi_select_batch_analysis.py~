# Need to do:
# 1. Take off the normalization (delta F/F) from the ROI timeseries. Because, doing this normalization prior to the low pass filter substraction, to removes signal drifts, is a bad idea.
# 2. Include markers of stimulus arrival on the linescan timeseries displayed for selecting ROIs
# 3. Make the above figure a bit better aesthetically 

import zeissImageClasses as zeiss
from zeissImageClasses import compress_filename
from matplotlib import pyplot as plt
import h5py
import pandas as pd
import re
import os

# read masterfile in Microsoft_excel
masterfile_path = '/Users/macbookair/goofy/data/beiquelab/iglusnfr_ca1culture/iglusnfr_analysis/'
image_path = '/Volumes/Anup_2TB/raw_data/beiquelab/zen/'
masterfname = masterfile_path + 'anup_iglusnfr_all_good_data.xlsx'
masterdf = pd.read_excel(masterfname,header=0,use_cols=11)
colnames = list(masterdf.columns)
fcount=0
for row in range(0,masterdf.shape[0]):
    lstfname = str(masterdf.loc[row,"linescan_timeseries_file"])
    if(re.search(r'^.*nan.*$',lstfname) is not None):
        continue
    # add path to filename
    lstfname = image_path+str(masterdf.loc[row,"linescan_timeseries_file"])
    # check is linescan_timeseries file exists
    if(not os.path.exists(lstfname)):
        print('Linescan timeseries file does not exist!')
        continue
    fcount  = fcount + 1
    print(str(fcount)+": "+lstfname)
    # check is linescan_lineselect file exists
    lssfname = str(masterdf.loc[row,"lineselect_file"])
    if(re.search(r'^.*nan.*$',lssfname) is not None):
        lssfname = lstfname
    else:
        lssfname = image_path + lssfname 
    print(" "*len(str(fcount)+": ")+lssfname)
    # check is linescan_select file exists
    if(not os.path.exists(lssfname)):
        print('Linescan select file does not exist!')
        continue
    # extract date
    expdate = re.search('[0-9]{8,8}?',lstfname)[0]
    print(expdate)
    # extract spineid
    spineid = re.search('\/[0-9]{8,8}?\/.*?\/',lstfname)[0][len(expdate)+2:-1]
    print(spineid)
    # open files
    zfilelst = zeiss.Image(lstfname)
    zfilelss = zeiss.Image(lssfname)
    # show metadata
    zeiss.show_metadata(zfilelst.metadata)
    zeiss.show_metadata(zfilelss.metadata)
    print(zfilelss.attachimage_metadata)
    # -------------
    print(zfilelst.attachment_names)
    print(zfilelss.attachment_names)
    # X and Y are flipped to match the image orientation
    x1 = zfilelss.attachimage_metadata['X1']
    y1 = zfilelss.attachimage_metadata['Y1']
    x2 = zfilelss.attachimage_metadata['X2']
    y2 = zfilelss.attachimage_metadata['Y2']
    fignamels = expdate+'_'+spineid
    fh1,ah1 = zeiss.display_lineselect_image(zfilelss.attachimage,1,x1,y1,x2,y2,title=fignamels,savepath="")
    fh2,ah2 = zfilelst.select_roi_linescan()
    # -----------------
    plt.show()
    input('enter key')
# zfilelsts.extract_roi()
# print(zfilelsts.roidf)
# zfilelsts.save_roi_to_csvfile(fname=compress_filename(fnlsts,fnamedepth),savepath=datasavepath)
# print(zfilelsts.coords)
